// find all books in aspecific genre
db.books.find({ genre: "Fiction" });
// find books published after a certain year
db.books.find({ published_year: { $gt: 2010 } });
// find books by a specific author
db.books.find({ author: "Author A" });
// update the price of a specific book
db.books.updateOne({ title: "Book 1" }, { $set: { price: 25.99 } });
// delete a book by title
db.books.deleteOne({ title: "Book 1" });

// advanced querries
//  Find books that are both in stock and published after 2010
db.books.find({ in_stock: true, published_year: { $gt: 2010 } });

// projection to return only title, author, and price
db.books.find({}, { title: 1, author: 1, price: 1, _id: 0 });

// sort books by price in ascending order
db.books.find().sort({ price: 1 });

// sort books by price in descending order
db.books.find().sort({ price: -1 });
 // pagianation (5 books per page)
 db.books.find().skip(5 * (pageNumber - 1)).limit(5);

 // Task 4: Aggregation Pipeline
 // calculate the average price of books by genre 
 db.books.aggregate([
  { $group: { _id: "$genre", averagePrice: { $avg: "$price" } } }
]);

// find thw author with the most books
db.books.aggregate([
  { $group: { _id: "$author", bookCount: { $sum: 1 } } },
  { $sort: { bookCount: -1 } },
  { $limit: 1 }
]);

// group books by publication decade and count them 
db.books.aggregate([
  { $project: { decade: { $floor: { $divide: ["$published_year", 10] } } } },
  { $group: { _id: "$decade", count: { $sum: 1 } } }
]);

// task 5 indexing
// Create an index on the 'author' field to
db.books.createIndex({ title: 1 });

// Create a compound index on 'author' and published_year' 
db.books.createIndex({ author: 1, published_year: 1 });

// create explain () to demonstrate perfomance improement 
db.books.find({ title: "Book 1" }).explain("executionStats");
db.books.find({ author: "Author A", published_year: 2015 }).explain("executionStats");